//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('create', true)
model User {
  id                            String                @id() @default(uuid())
  name                          String?
  email                         String?               @unique()
  pictureUrl                    String?
  stripeCustomerId              String?
  /// @password
  /// @omit
  password                      String?
  dateCreated                   DateTime              @default(now())
  dateUpdated                   DateTime              @default(now()) @updatedAt()
  accounts                      Account[]
  sessions                      Session[]
  roles                         Role[]
  examsAsCreatedBy              Exam[]                @relation("createdBy")
  studentSubmissionsAsStudent   StudentSubmission[]   @relation("student")
  resultsAsStudent              Result[]              @relation("student")
  compatibilityTestsAsStudent   CompatibilityTest[]   @relation("student")
  faceRecognitionTestsAsStudent FaceRecognitionTest[] @relation("student")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('read', auth().id == this.userId)
/// @@allow('delete', auth().id == this.userId)
/// @@allow('create', name != 'admin')
/// @@allow('update', future().name != 'admin')
model Role {
  id     String @id() @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

/// @@allow('all', true)
model Exam {
  id                 String              @id() @default(uuid())
  title              String
  description        String?
  type               String?
  createdById        String?
  createdBy          User?               @relation(fields: [createdById], references: [id], name: "createdBy")
  studentSubmissions StudentSubmission[] @relation("exam")
  results            Result[]            @relation("exam")
  dateCreated        DateTime            @default(now())
  dateUpdated        DateTime            @default(now()) @updatedAt()
}

/// @@allow('all', true)
model StudentSubmission {
  id             String   @id() @default(uuid())
  submissionData String?
  submissionTime String?
  studentId      String?
  student        User?    @relation(fields: [studentId], references: [id], name: "student")
  examId         String?
  exam           Exam?    @relation(fields: [examId], references: [id], name: "exam")
  dateCreated    DateTime @default(now())
  dateUpdated    DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Result {
  id          String   @id() @default(uuid())
  score       String?
  feedback    String?
  studentId   String?
  student     User?    @relation(fields: [studentId], references: [id], name: "student")
  examId      String?
  exam        Exam?    @relation(fields: [examId], references: [id], name: "exam")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model CompatibilityTest {
  id          String   @id() @default(uuid())
  testResult  String?
  testTime    String?
  studentId   String?
  student     User?    @relation(fields: [studentId], references: [id], name: "student")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model FaceRecognitionTest {
  id          String   @id() @default(uuid())
  testResult  String?
  testTime    String?
  studentId   String?
  student     User?    @relation(fields: [studentId], references: [id], name: "student")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model RagVector {
  id           String @id() @default(uuid())
  vectorId     String
  argsJson     Bytes?
  docstoreJson Bytes?
  hnswlibIndex Bytes?
}

/// @@allow('all', true)
model HomePage {
  id          String   @id() @default(uuid())
  title       String
  content     String?
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}
